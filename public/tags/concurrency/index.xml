<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concurrency on Canadian Data Guy</title>
    <link>https://canadiandataguy.com/tags/concurrency/</link>
    <description>Recent content in concurrency on Canadian Data Guy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Sep 2023 17:29:06 +0000</lastBuildDate>
    <atom:link href="https://canadiandataguy.com/tags/concurrency/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Solving Delta Table Concurrency Issues: Practical Code Solutions &amp; Insights</title>
      <link>https://canadiandataguy.com/blog/2023-09-29-solvingdeltatableconcurrencyissuespracticalcodesolutionsinsights/</link>
      <pubDate>Fri, 29 Sep 2023 17:29:06 +0000</pubDate>
      <guid>https://canadiandataguy.com/blog/2023-09-29-solvingdeltatableconcurrencyissuespracticalcodesolutionsinsights/</guid>
      <description>Solving Delta Table Concurrency Issues: Practical Code Solutions &amp;amp; Insights Delta Lake is a powerful technology for bringing ACID transactions to your data lakes. It allows multiple operations to be performed on a dataset concurrently. However, dealing with concurrent operations can sometimes be tricky and may lead to issues such as ConcurrentAppendException, ConcurrentDeleteReadException, and ConcurrentDeleteDeleteException. In this blog post, we will explore why these issues occur and how to handle them effectively using a Python function, and how to avoid them with table design and using isolation levels and write conflicts.</description>
    </item>
  </channel>
</rss>
